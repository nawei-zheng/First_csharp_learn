命名空间的作用：类似于C中文件分类？
类
{
	构造函数（可以不显性定义）用于初始化对象
	属性
	方法
}
new:创建对象实例（类），会调用该类的构造函数来初始化

1. method == c中的函数：
	方法可以自我调用（方法中调用本方法）
	方法的参数可以1.传值：等于复制一份，仅做使用，函数内改变参数值不会改变实参值   或者    2.引用参数：变量名前面加ref。 引用参数直接调用实参在内存中地址，函数内改变参数的值，实参的值也会变（相当于用指针做参数？？改变指针变量的值）3.输出参数：变量名前加out
2. char类型变量是16位的，可以用来表示非ASCII码值……表情符号之类的？

3. 数据类型分成 值类型、引用类型、指针类型
值类型：和变量类型差不多
引用类型：
Object---可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值，分配之前要先进行类型转换
object obj; 
obj = 100; //装箱

Dynamic---可以储存任何类型的数据       与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。

String：
String str = "runoob.com";   || @"runoob.com";（@称作"逐字字符串"）将转义字符（\）当作普通字符对待

Pointer types：指针类型和C里面用法一样

4. 结构体和类的区别
类：类是引用类型，意味着当你将一个类的实例赋值给另一个变量时，实际上是将引用传递给了另一个变量，它们引用同一个对象。
结构体：结构体是值类型，当你将一个结构体的实例赋值给另一个变量时，会复制实际的值到新变量中，它们是两个相互独立的实例。

5. 构造函数和方法的区别
构造函数：是一个特殊的成员函数   ----没有类型，和类的定义方式一样，构造函数通常用于设置对象的初始状态，初始化字段值等。 
class Rectangle
   {
      public Rectangle(double l, double w)
      {
         length = l;
         width = w;
      }
   }
方法：有返回值更像C里面的函数，用来执行代码。
析构函数：在类的名称前加上一个波浪形（~）作为前缀，它不返回值，也不带任何参数。

6.  标识符~
static：  静态变量用于定义常量 ，它们的值可以通过直接调用类而不需要创建类的实例来获，任何位置都可以定义静态变量，无论有多少个类的对象被创建，只会有一个该静态成员的副本。
protected： 在类内部以及派生类中可见。
internal：在同一程序集内部可见。
public：在任何地方都可以访问。
private：仅在包含成员的类内部可见。
protected internal：在本程序集或者，外程序集的派生类
private protected：在同一程序集内部的派生类中可见。
7. class <派生类> : <基类>
父类内部变量要加protected标识符，这样子类才可以访问
派生类可以继承基类成员与行为

8.定义接口: MyInterface.cs
interface IMyInterface
{
    void MethodToImplement();
}
接口默认public，接口定于语法合同“是什么”
class InterfaceImplementer : IMyInterface
{
    static void Main()
    {
        InterfaceImplementer iImp = new InterfaceImplementer();
        iImp.MethodToImplement();
    }

    public void MethodToImplement()
    {
        Console.WriteLine("MethodToImplement() called.");
    }
}
派生类来定义“怎么做”，派生类来实现接口。实现格式和子类继承父类一样
*如果接口继承接口，那么实现类就必须实现所有被继承的接口
9. 委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 System.Delegate 类。
用法：用委托对象调用方法-----委托参数为方法XXX（函数名）-----先声明然后用new实例化然后，直接用new的对象
事件：用委托实现事件。发布器-----在一个类里声明且生成事件，使用委托与事件处理程序（事件方法？）关联。
		     订阅器----接收事件，提供事件处理程序的对象
在发布器类中的委托调用订阅器类中的方法。
*******在类的内部声明事件，首先必须声明该事件的委托类型。例如：

public delegate void BoilerLogHandler(string status);
然后，声明事件本身，使用 event 关键字：

// 基于上面的委托定义事件
public event BoilerLogHandler BoilerEventLog;
事件生成的时候会调用委托  、（事件handel就是委托名，那么等于事件是委托类型？）

10. +=：这是事件订阅操作符，用于将一个委托方法添加到事件的订阅列表中。				